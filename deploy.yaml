AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploys a security auditing tool

Parameters:

  CloudTrailS3Bucket:
    Type: String
    Default: 1strategy-training-traillogs
    Description: This is the bucket where your cloudtrail logs feed into

  SNSEmail:
    Type: String
    Default: justin.iravani@1strategy.com
    Description: The email where SNS notifications will be sent

Resources:

  #############################################################################
  ## SNS                                                                     ##
  #############################################################################

  SecurityFairySNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: SecurityFairy
      Subscription:
        -
          Endpoint:
            Ref: SNSEmail
          Protocol: "email"
      TopicName: security_fairy_topic

  #############################################################################
  ## S3 BUCKET                                                               ##
  #############################################################################

  SecurityFairyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub security-fairy-bucket-${AWS::Region}-${AWS::AccountId}

#   SecurityFairyS3BucketPolicy:
#     Type: "AWS::S3::BucketPolicy"
#     Properties:
#       Bucket: !Ref SecurityFairyS3Bucket
#       PolicyDocument:
#         Statement:
#         -
#           Action:
#             - "s3:GetObject"
#           Effect: "Allow"
#           Resource:
#             Fn::Join:
#               - ""
#               -
#                 - "arn:aws:s3:::"
#                 -
#                   Ref: "SecurityFairyS3Bucket"
#                 - "/*"
#           Principal: "*"
#           Condition:
#             ArnLike:
#               aws:SourceArn:
#                 - "http://www.example.com/*"
#                 - "http://example.com/*"

  #############################################################################
  ## DYNAMODB TABLE                                                          ##
  #############################################################################

  SecurityFairyDynamoDB:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: execution_id
          AttributeType: S
        - AttributeName: entity_arn
          AttributeType: S
      KeySchema:
        - AttributeName: execution_id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: entity_arn
          KeySchema:
            - AttributeName: entity_arn
              KeyType: HASH
          Projection:
            NonKeyAttributes:
              - entity_arn
            ProjectionType: INCLUDE
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      TableName: "security_fairy_dynamodb_table"

  #############################################################################
  ## STEP FUNCTIONS                                                          ##
  #############################################################################

  SecurityFairyApprovalActivity:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: security_fairy_approval_activity

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/StatesExecutionRole-${AWS::Region}
      DefinitionString: !Sub |-
        {
        	"StartAt": "InjectVariables",
        	"States": {
        		"InjectVariables": {
             "Type": "Task",
             "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security_fairy_variable_injection",
             "Next": "QueryAthena"
            },
        		"QueryAthena": {
        			"Type": "Task",
        			"Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security_fairy_athena_query",
        			"Next": "WaitForQuery"
            },
        		"WaitForQuery": {
        			"Type": "Wait",
        			"Seconds": 60,
        			"Next": "BuildPolicy"
            },
        		"BuildPolicy": {
        			"Type": "Task",
        			"Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security_fairy_revised_policy_generator",
        			"Retry": [{
        				"ErrorEquals": [
        					"States.ALL"
                ],
        				"IntervalSeconds": 60,
        				"MaxAttempts": 3,
        				"BackoffRate": 1.5
              }],
        			"Next": "PromptForApproval"
            },
        		"PromptForApproval": {
        			"Type": "Parallel",
        			"End": true,
        			"Branches": [{
        					"StartAt": "Approval",
        					"States": {
        						"Approval": {
        							"Type": "Task",
        							"Resource": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:activity:security_fairy_approval_activity",
        							"Catch": [{
        								"ErrorEquals": ["States.TaskFailed", "States.Timeout"],
        								"Next": "PolicyDenial"
                      }],
        							"Next": "PolicyApply"
                    },
        						"PolicyApply": {
        							"Type": "Task",
        							"Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security_fairy_revised_policy_approve",
        							"End": true
                    },
        						"PolicyDenial": {
        							"Type": "Task",
        							"Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security_fairy_revised_policy_deny",
        							"End": true
                    }
                  }
                },
                {
        					"StartAt": "WaitForCode",
        					"States": {
        						"WaitForCode": {
        							"Type": "Wait",
        							"Seconds": 3,
        							"Next": "GenerateCode"
                    },
        						"GenerateCode": {
        							"Type": "Task",
        							"Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security_fairy_get_task_token",

        							"Next": "SendApprovalRequest"
                    },
        						"SendApprovalRequest": {
        							"Type": "Task",
        							"Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:security_fairy_email_approval_request",
        							"End": true
                    }
                  }
                }
              ]
            }
          }
        }

  #############################################################################
  ## LAMBDA FUNCTIONS                                                        ##
  #############################################################################

  SecurityFairyApiEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_api_endpoint'
      CodeUri: .
      Description: ''
      Handler: api_endpoint.lambda_handler
      MemorySize: 128
      Policies:
      - AdministratorAccess
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          state_machine: !Ref StateMachine
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /start
            Method: GET
        PostApi:
          Type: Api
          Properties:
            Path: /start
            Method: POST

  SecurityFairyRevertApiEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_api_revert'
      CodeUri: .
      Description: ''
      Handler: revert.lambda_handler
      MemorySize: 128
      Policies:
      - AdministratorAccess
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          state_machine: !Ref StateMachine
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /revert
            Method: GET
        PostApi:
          Type: Api
          Properties:
            Path: /revert
            Method: POST

  SecurityFairyVariableInjection:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_variable_injection'
      CodeUri: .
      Description: 'This function queries Athena to determine permissions'
      Handler: variable_injection.lambda_handler
      MemorySize: 128
      Policies:
      - AWSLambdaBasicExecutionRole
      - AWSLambdaReadOnlyAccess
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          sns_arn: !Ref SecurityFairySNSTopic
          dynamodb_table: !Ref SecurityFairyDynamoDB
          activity_arn: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:activity:security_fairy_approval_activity
          s3_bucket: !Ref SecurityFairyS3Bucket
          api_endpoint: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  SecurityFairyAthenaQuery:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_athena_query'
      CodeUri: .
      Description: 'This function queries Athena to determine permissions'
      Handler: athena_query.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonAthenaFullAccess
      - AmazonS3FullAccess
      Runtime: python2.7
      Timeout: 30

  SecurityFairyTableCreation:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: 'security_fairy_build_cloudtrail_table'
      CodeUri: .
      Description: 'This function builds the required cloudtrail table in Athena'
      Handler: build_cloudtrail_table.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonAthenaFullAccess
      - AWSLambdaBasicExecutionRole
      - AWSLambdaReadOnlyAccess
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          cloudtrail_bucket: !Ref CloudTrailS3Bucket

  LaunchSecurityFairyTableCreation:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: SecurityFairyTableCreation
    Properties:
      ServiceToken: !GetAtt SecurityFairyTableCreation.Arn

  SecurityFairyPolicyGenerator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_revised_policy_generator'
      CodeUri: .
      Description: ''
      Handler: revised_policy_generator.lambda_handler
      MemorySize: 128
      Policies:
      - IAMReadOnlyAccess
      - AmazonAthenaFullAccess
      - AmazonDynamoDBFullAccess
      - AmazonS3ReadOnlyAccess
      Runtime: python2.7
      Timeout: 30

  SecurityFairyEmailApproval:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_email_approval_request'
      CodeUri: .
      Description: ''
      Handler: email_approval_request.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonSNSFullAccess
      - AWSStepFunctionsFullAccess
      Runtime: python2.7
      Timeout: 30

  SecurityFairyApiApproval:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_api_approval'
      CodeUri: .
      Description: ''
      Handler: api_approval.lambda_handler
      MemorySize: 512
      Runtime: python2.7
      Timeout: 30
      Policies:
      - AmazonDynamoDBFullAccess
      - AWSStepFunctionsFullAccess
      Environment:
        Variables:
          dynamodb_table: !Ref SecurityFairyDynamoDB
      Events:
        ApprovalGetApi:
          Type: Api
          Properties:
            Path: /{approval}
            Method: GET
        ApprovalPostApi:
          Type: Api
          Properties:
            Path: /{approval}
            Method: POST

  SecurityFairyApprovePolicy:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_revised_policy_approve'
      CodeUri: .
      Description: ''
      Handler: revised_policy_approve.lambda_handler
      MemorySize: 128
      Policies:
      - IAMReadOnlyAccess
      - AmazonDynamoDBFullAccess
      - AdministratorAccess
      - AWSStepFunctionsFullAccess
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          dynamodb_table: !Ref SecurityFairyDynamoDB

  SecurityFairyDenyPolicy:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_revised_policy_deny'
      CodeUri: .
      Description: ''
      Handler: revised_policy_deny.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonDynamoDBFullAccess
      Runtime: python2.7
      Timeout: 30
      Environment:
        Variables:
          dynamodb_table: !Ref SecurityFairyDynamoDB

  SecurityFairyGetTaskToken:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_get_task_token'
      CodeUri: .
      Description: ''
      Handler: get_task_token.lambda_handler
      MemorySize: 128
      Runtime: python2.7
      Timeout: 30
      Policies:
      - AWSStepFunctionsFullAccess

Outputs:
  ApiEndpoint:
    Description: "Security Fairy Invocation Endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/start"
