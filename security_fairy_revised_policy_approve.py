import boto3
import re
import os
from botocore.exceptions import ClientError

try:
    session = boto3.session.Session(profile_name='training', region_name='us-east-1')
except Exception:
    session = boto3.session.Session()


def lambda_handler(event, context):

    print(event)
    try:
        execution_id    = event['execution_id']
        dynamodb_table  = event.get('dynamodb_table', os.environ['dynamodb_table'])

        policy_object   = get_revised_policy(execution_id, dynamodb_table)
        entity_name     = get_entity_name_from_arn(policy_object['entity_arn'])

        existing_policies = get_existing_managed_policies(entity_name)
        preserve_existing_policies(execution_id, existing_policies, dynamodb_table)
        detach_existing_policies(entity_name, existing_policies)
        apply_revised_policy(policy_object)

    except Exception as error:
        print(error)


def apply_revised_policy(policy_object):

    entity_arn  = policy_object['entity_arn']
    entity_name = get_entity_name_from_arn(entity_arn)
    policy      = policy_object['policy']
    policy_name = "{entity_name}-security-fairy-revised-policy".format(entity_name=entity_name).replace("_","-")

    print("Attaching: ")
    print(policy_name)

    try:
        create_and_attached_policy(entity_name, policy_name, policy)
    except Exception as e:
        print(e)
        policy_arn = entity_arn.split('/')[0].replace('role','policy/security-fairy/') + policy_name
        create_new_policy_version(policy_arn, policy)

def create_and_attached_policy(policy_name, policy):

    iam_client = session.client('iam')
    creation_response   = iam_client.create_policy( PolicyName=policy_name,
                                                    Path='/security-fairy/',
                                                    PolicyDocument=policy,
                                                    Description='This is an autogenerated policy from Security Fairy')
    print(creation_response)
    attachment_response = iam_client.attach_role_policy(RoleName=entity_name,
                                                        PolicyArn=creation_response['Policy']['Arn'])
    print(attachment_response)


def create_new_policy_version(policy_arn, policy):

    iam_client  = session.client('iam')
    versions    = iam_client.list_policy_versions( PolicyArn=policy_arn)['Versions']
    print(versions)
    if len(versions) > 1:
        version_id = versions[1]['VersionId']
        print(version_id)
        iam_client.delete_policy_version(   PolicyArn=policy_arn,
                                            VersionId=version_id)
    # apply new version
    response = iam_client.create_policy_version(PolicyArn=policy_arn,
                                                PolicyDocument=policy,
                                                SetAsDefault=True)
    print("Policy version {} created.".format(response['PolicyVersion']['VersionId']))


def get_existing_managed_policies(entity_name):

    attached_policies = session.client('iam').list_attached_role_policies(RoleName=entity_name)['AttachedPolicies']
    existing_policies = []
    for policy in attached_policies:
        print(policy['PolicyArn'])
        existing_policies.append(policy['PolicyArn'])

    print(existing_policies)
    return existing_policies


def preserve_existing_policies(execution_id, existing_policies, dynamodb_table):

    dynamodb_client = session.client('dynamodb')
    dynamodb_client.update_item(TableName=dynamodb_table,
                                Key={
                                    "execution_id": {
                                        "S": execution_id
                                    }
                                },
                                AttributeUpdates={
                                    "existing_policies": {
                                        "Value":{"SS": existing_policies}
                                    }
                             })


def detach_existing_policies(entity_name, existing_policies):

    print("Detaching Policies: ")
    for policy in existing_policies:
        print(policy['PolicyArn'])
        session.client('iam').detach_role_policy(  RoleName=entity_name,
                                                   PolicyArn=policy['PolicyArn'])


def get_revised_policy(execution_id, dynamodb_table):

    return_response = {}
    try:
        dynamodb_response = session.client('dynamodb')\
                        .get_item(TableName=dynamodb_table,
                                  Key={
                                            "execution_id": {
                                                "S": execution_id
                                            }
                                        })
        return_response['policy']       = dynamodb_response['Item']['new_policy']['S']
        return_response['entity_arn']   = dynamodb_response['Item']['entity_arn']['S']
        print(return_response)
        return return_response

    except Exception as e:
        print(e)
        raise ValueError('Execution Id doesn\'t exist or has expired. Security-fairy must be rerun.')


def get_entity_name_from_arn(entity_arn):
    entity_name = re.split('/|:', entity_arn)[6]
    return entity_name


if __name__ == '__main__':
    # existing_policies   = ['arn:aws:iam::aws:policy/AmazonS3FullAccess', 'arn:aws:iam::281782457076:policy/security-fairy/1s-security-fairy-role-security-fairy-revised-policy', 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess', 'arn:aws:iam::aws:policy/AdministratorAccess']
    # dynamodb_table      = 'security_fairy_dynamodb_table'
    # execution_id        = '830eb4f7-364f-44b2-8617-578276ce2270'
    # preserve_existing_policies(execution_id, existing_policies, dynamodb_table)

    # lambda_handler({
    #     "execution_id": "c40e4cc1-a88d-4a99-8d54-6ffc0b07e4af"
    # }, {})

    # if __name__ == '__main__':
    #     detach_existing_policies('arn:aws:iam::281782457076:role/1s_security_fairy_role')
    # if __name__ == '__main__':
    #     get_revised_policy('8d544e31-37af-4eb2-acf3-b5eda9f108bd')
    # if __name__ == '__main__':
    #     apply_revised_policy({'policy': u'{"Version": "2012-10-17", "Statement": [{"Action": ["ec2:DescribeAddresses"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyEc2"}, {"Action": ["logs:CreateLogStream"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyLogs1"}, {"Action": ["iam:GetGroup"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyIam"}, {"Action": ["lambda:ListFunctions20150331", "lambda:DeleteFunction20150331"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyLambda"}, {"Action": ["logs:CreateLogStream"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyLogs2"}, {"Action": ["logs:CreateLogGroup", "logs:CreateLogStream"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyLogs5"}, {"Action": ["kms:Decrypt"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyKms"}]}', 'entity_arn': u'arn:aws:iam::281782457076:role/1s_security_fairy_role'})

    policy     = '{"Version": "2012-10-17", "Statement": [{"Action": ["ec2:DescribeAddresses"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyEc2"}, {"Action": ["logs:CreateLogStream"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyLogs1"}, {"Action": ["iam:GetGroup"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyIam"}, {"Action": ["lambda:ListFunctions20150331", "lambda:DeleteFunction20150331"], "Resource": "*",      "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyLambda"}, {"Action": ["logs:CreateLogStream"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyLogs2"}, {"Action": ["logs:CreateLogGroup", "logs:CreateLogStream"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyLogs5"}, {"Action": ["kms:Decrypt"], "Resource": "*", "Effect": "Allow", "Sid": "SecurityFairyBuiltPolicyKms"}]}'
    entity_arn = 'arn:aws:iam::281782457076:role/1s_security_fairy_role'
    policy_arn = 'arn:aws:iam::281782457076:policy/security-fairy/1s-security-fairy-role-security-fairy-revised-policy'
    create_new_policy_version(policy_arn, policy)
    # [{u'PolicyName': 'AmazonS3FullAccess', u'PolicyArn': 'arn:aws:iam::aws:policy/AmazonS3FullAccess'}, {u'PolicyName': '1s-security-fairy-role-security-fairy-revised-policy', u'PolicyArn': 'arn:aws:iam::281782457076:policy/security-fairy/1s-security-fairy-role-security-fairy-revised-policy'}, {u'PolicyName': 'AmazonDynamoDBFullAccess', u'PolicyArn': 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'}, {u'PolicyName': 'AdministratorAccess', u'PolicyArn': 'arn:aws:iam::aws:policy/AdministratorAccess'}]

    # print(get_existing_managed_policies('1s_security_fairy_role'))
