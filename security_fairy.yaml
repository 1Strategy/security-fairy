AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploys a security auditing tool
Parameters:

  CloudTrailS3Bucket:
    Type: String
    Default: some-bucket
    Description: This is the bucket where your cloudtrail logs feed into

  SNSEmail:
    Type: String
    Default: justin.iravani@1strategy.com
    Description: The email where SNS notifications will be sent

Resources:
  SecurityFairyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Name: !Sub security-fairy-bucket-${AWS::Region}-${AWS::AccountId}

  SecurityFairyApiEndpoint:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_api_endpoint'
      CodeUri: .
      Description: ''
      Handler: security_fairy_api_endpoint.lambda_handler
      MemorySize: 128
      Policies:
      - AdministratorAccess
      Runtime: python3.6
      Timeout: 30
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /start
            Method: GET
        PostApi:
          Type: Api
          Properties:
            Path: /start
            Method: POST

  SecurityFairyVariableInjection:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_variable_injection'
      CodeUri: .
      Description: 'This function queries Athena to determine permissions'
      Handler: security_fairy_variable_injection.lambda_handler
      MemorySize: 128
      Policies:
      - AWSLambdaBasicExecutionRole
      Runtime: python3.6
      Timeout: 30
      Environment:
        Variables:
          sns_arn: !Ref SecurityFairySNSTopic
          dynamodb_table: !Ref SecurityFairyDynamoDB
          activity_arn: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:activity:security_fairy_approval_activity
          s3_bucket: !Ref SecurityFairyS3Bucket
          api_endpoint: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  SecurityFairyAthenaQuery:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_athena_query'
      CodeUri: .
      Description: 'This function queries Athena to determine permissions'
      Handler: security_fairy_athena_query.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonAthenaFullAccess
      Runtime: python3.6
      Timeout: 30

  SecurityFairyPolicyGenerator:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_revised_policy_generator'
      CodeUri: .
      Description: ''
      Handler: security_fairy_revised_policy_generator.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonAthenaFullAccess
      - AmazonDynamoDBFullAccess
      Runtime: python3.6
      Timeout: 30

  SecurityFairyEmailApproval:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_email_approval_request'
      CodeUri: .
      Description: ''
      Handler: security_fairy_revised_policy_generator.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonSNSFullAccess
      - AmazonDynamoDBFullAccess
      - AWSStepFunctionsFullAccess
      Runtime: python3.6
      Timeout: 30

  SecurityFairyApiApproval:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_api_approval'
      CodeUri: .
      Description: ''
      Handler: security_fairy_api_approval.lambda_handler
      MemorySize: 128
      Runtime: python2.7
      Timeout: 30
      Events:
        GetApi:
          Type: Api
          Properties:
            Path: /approve
            Method: GET
        PostApi:
          Type: Api
          Properties:
            Path: /approve
            Method: POST

  SecurityFairyApplyPolicy:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_policy_apply'
      CodeUri: .
      Description: ''
      Handler: security_fairy_policy_apply.lambda_handler
      MemorySize: 128
      Runtime: python2.7
      Timeout: 30


  SecurityFairyDynamoDB:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "execution_id"
          AttributeType: "S"
        -
          AttributeName: "entity_arn"
          AttributeType: "S"

      KeySchema:
        -
          AttributeName: "execution_id"
          KeyType: "HASH"
        -
          AttributeName: "entity_arn"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "security_fairy_dynamodb_table"

  SecurityFairySNSTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: SecurityFairy
      Subscription:
        -
          Endpoint:
            Ref: SNSEmail
          Protocol: "email"
      TopicName: security_fairy_topic

  SecurityFairyApprovalActivity:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: security_fairy_approval_activity

#   StateMachine:
#     Type: AWS::StepFunctions::StateMachine
#     Properties:
#       RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/StatesExecutionRole-${AWS::Region}
#       DefinitionString: !Sub |-
#       {
#           "StartAt": "QueryAthena",
#           "States": {
#             "QueryAthena": {
#               "Type": "Task",
#               "Resource": "",
#               "Next": "WaitForQuery"
#             }
#           },
#           "WaitForQuery": {
#             "Type": "Wait",
#             "Seconds": 60,
#             "Next": "BuildPolicy"
#           },
#           "BuildPolicy": {
#             "Type": "Task",
#             "Resource": !Ref SecurityFairyApprovalActivity,
#             "Retry": [
#                {
#                   "ErrorEquals":[
#                      "States.ALL"
#                   ],
#                   "IntervalSeconds":10,
#                   "MaxAttempts":3,
#                   "BackoffRate":1.5
#                }
#             ],
#             "Next": "SendApprovalEmail"
#           },
#           "SendApprovalEmail": {
#             "Type": "Task",
#             "Resource": "",
#             "End": true
#           }
#         }
#
#
# "PromptForFireCommand":{
#    "Type":"Parallel",
#    "Next":"MergeOutputStep",
#    "Branches":[
#       {
#          "StartAt":"IssueFireCommand",
#          "States":{
#             "IssueFireCommand":{
#                "Type":"Task",
#                "Resource":"<REPLACE ME>",
#                "TimeoutSeconds":120,
#                "Catch": [{
#                   "ErrorEquals": [ "States.TaskFailed", "States.Timeout" ],
#                   "Next": "Hesitation"
#                   }],
#                "Next":"PlanetDestroyed"
#             },
#             "PlanetDestroyed":{
#               "Type":"Pass",
#               "Result":"planet_destroyed",
#               "ResultPath":"$.message.message_context",
#               "End":true
#             },
#             "Hesitation":{
#               "Type":"Pass",
#               "Result":"hesitation",
#               "ResultPath":"$.message.message_context",
#               "End":true
#
#             }
#          }
#       },
#       {
#          "StartAt":"WaitForCode",
#          "States":{
#             "WaitForCode":{
#                "Type":"Wait",
#                "Seconds":3,
#                "Next":"GenerateCode"
#             },
#             "GenerateCode":{
#                "Type":"Task",
#                "Resource":"arn:aws:lambda:us-west-2:281782457076:function:serverless_get_firing_code",
#                "Next":"JSONXform"
#             },
#             "JSONXform":{
#                "Type":"Pass",
#                "InputPath":"$.firing_code",
#                "ResultPath":"$.message",
#                "Next":"SendCode"
#             },
#             "SendCode":{
#                "Type":"Task",
#                "Resource":"arn:aws:lambda:us-west-2:281782457076:function:serverless_notification",
#                "End":true
#             }
#          }
#       },
#       {
#          "StartAt":"InformationPassThrough1",
#          "States":{
#             "InformationPassThrough1":{
#                "Type":"Pass",
#                "End":true
#             }
#          }
#       }
#    ]
# },

Outputs:
  ApiEndpoint:
    Description: "Security Fairy Invokation Endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  # SecurityFairyS3BucketPolicy:
  #   Type: "AWS::S3::BucketPolicy"
  #   Properties:
  #     Bucket: !Ref SecurityFairyS3Bucket
  #     PolicyDocument:
  #       Statement:
  #       -
  #         Action:
  #           - "s3:GetObject"
  #         Effect: "Allow"
  #         Resource:
  #           Fn::Join:
  #             - ""
  #             -
  #               - "arn:aws:s3:::"
  #               -
  #                 Ref: "SecurityFairyS3Bucket"
  #               - "/*"
  #         Principal: "*"
  #         Condition:
  #           ArnLike:
  #             aws:SourceArn:
  #               - "http://www.example.com/*"
  #               - "http://example.com/*"
