AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Specification template describing your function.
Parameters:
  SNSEmail:
    Type: String
    Default: email@domain.com
    Description: The email where SNS notifications will be sent
Resources:
  SecurityFairy:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: SecurityFairy
      Subscription:
        -
          Endpoint:
            Ref: SNSEmail
          Protocol: "email"
      TopicName: security_fairy_topic


  AthenaQueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'security_fairy_athena_query'
      CodeUri: .
      Description: 'This function queries Athena to determine '
      Handler: security_fairy_athena_query.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonAthenaFullAccess
      Runtime: python3.6
      Timeout: 30

  ServerlessMergeParallel:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: 'serverless_merge_parallel'
      CodeUri: .
      Description: ''
      Handler: serverless_merge_parallel.lambda_handler
      MemorySize: 128
      Policies:
      - AmazonAthenaFullAccess
      - AmazonDynamoDBFullAccess
      Runtime: python3.6
      Timeout: 30


  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/service-role/StatesExecutionRole-${AWS::Region}
      DefinitionString: !Sub |-
      {
          "StartAt": "QueryAthena",
          "States": {
            "QueryAthena": {
              "Type": "Task",
              "Resource": "",
              "Next": "WaitForQuery"
            }
          },
          "WaitForQuery": {
            "Type": "Wait",
            "Seconds": 60,
            "Next": "BuildPolicy"
          },
          "BuildPolicy": {
            "Type": "Task",
            "Resource": "Hello World!",
            "Retry":[
               {
                  "ErrorEquals":[
                     "States.ALL"
                  ],
                  "IntervalSeconds":10,
                  "MaxAttempts":3,
                  "BackoffRate":1.5
               }
            ],
            "Next": "SendApprovalEmail"
          },
          "SendApprovalEmail": {
            "Type": "Task",
            "Resource": "Hello World!",
            "End": true
          }
        }
